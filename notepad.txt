import org.w3c.dom.*;
import org.xml.sax.SAXException;

import javax.xml.parsers.*;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Questionnaire {

    static class Question {
        String text;
        String type;
        String answer;

        public Question(String text, String type) {
            this.text = text;
            this.type = type;
        }
    }

    static class SubQuestion extends Question {
        List<Question> subQuestions = new ArrayList<>();

        public SubQuestion(String text, String type) {
            super(text, type);
        }
    }

    public static void main(String[] args) {
        List<Question> questions = readQuestionsFromXML("questions.xml");
        collectAnswers(questions);
        displayAnswers(questions);
    }

    private static List<Question> readQuestionsFromXML(String filePath) {
        List<Question> questions = new ArrayList<>();
        try {
            File inputFile = new File(filePath);
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(inputFile);
            doc.getDocumentElement().normalize();

            NodeList questionNodes = doc.getElementsByTagName("question");
            for (int i = 0; i < questionNodes.getLength(); i++) {
                Node questionNode = questionNodes.item(i);
                if (questionNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element questionElement = (Element) questionNode;
                    String text = questionElement.getAttribute("text");
                    String type = questionElement.getAttribute("type");
                    Question question;
                    if ("boolean".equals(type)) {
                        question = new SubQuestion(text, type);
                        NodeList optionNodes = questionElement.getElementsByTagName("option");
                        for (int j = 0; j < optionNodes.getLength(); j++) {
                            Node optionNode = optionNodes.item(j);
                            if (optionNode.getNodeType() == Node.ELEMENT_NODE) {
                                Element optionElement = (Element) optionNode;
                                NodeList subQuestionNodes = optionElement.getElementsByTagName("sub_question");
                                for (int k = 0; k < subQuestionNodes.getLength(); k++) {
                                    Node subQuestionNode = subQuestionNodes.item(k);
                                    if (subQuestionNode.getNodeType() == Node.ELEMENT_NODE) {
                                        Element subQuestionElement = (Element) subQuestionNode;
                                        String subQuestionText = subQuestionElement.getAttribute("text");
                                        String subQuestionType = subQuestionElement.getAttribute("type");
                                        SubQuestion subQuestion = new SubQuestion(subQuestionText, subQuestionType);
                                        ((SubQuestion) question).subQuestions.add(subQuestion);
                                    }
                                }
                            }
                        }
                    } else {
                        question = new Question(text, type);
                    }
                    questions.add(question);
                }
            }
        } catch (ParserConfigurationException | IOException | SAXException e) {
            e.printStackTrace();
        }
        return questions;
    }

    private static void collectAnswers(List<Question> questions) {
        Scanner scanner = new Scanner(System.in);
        for (Question question : questions) {
            System.out.println(question.text);
            if (question instanceof SubQuestion) {
                SubQuestion subQuestion = (SubQuestion) question;
                for (Question subQ : subQuestion.subQuestions) {
                    System.out.println(subQ.text);
                    subQ.answer = scanner.nextLine();
                }
            } else {
                question.answer = scanner.nextLine();
            }
        }
    }

    private static void displayAnswers(List<Question> questions) {
        System.out.println("\nAnswers:");
        System.out.println("------------------------------------------------------------------");
        System.out.printf("| %-30s | %-15s | %-10s |\n", "Question", "Type", "Answer");
        System.out.println("------------------------------------------------------------------");
        for (Question question : questions) {
            displayQuestion(question);
        }
        System.out.println("------------------------------------------------------------------");
    }

    private static void displayQuestion(Question question) {
        if (question instanceof SubQuestion) {
            SubQuestion subQuestion = (SubQuestion) question;
            for (Question subQ : subQuestion.subQuestions) {
                System.out.printf("| %-30s | %-15s | %-10s |\n", subQ.text, subQ.type, subQ.answer);
            }
        } else {
            System.out.printf("| %-30s | %-15s | %-10s |\n", question.text, question.type, question.answer);
        }
    }
}
